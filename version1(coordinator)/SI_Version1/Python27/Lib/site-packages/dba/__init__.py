try:
    a = xrange(0)
except:
    raise ImportError("Not running Python 2.7")
def isb(bin, fraction=True, negative=True):
    """dba.isb(Binary, [Fractions, Negatives]) -> True/Error message"""
    try:
        bin = str(bin)
    except:
        return "Input could not be converted to a string value"
    dot = False
    neg = False
    for i in bin:
        if i <> "0" and i <> "1" and (i <> "." or fraction == False) and (i <> "-" or negative == False):
            r = "Input contains a value other than "
            if fraction == True:
                r += "'.' "
            if negative == True:
                r += "'-'  "
            r += "'0' and '1'"
            return r
        if i == "." and dot == True and fraction == True:
            return "Input contains more than one '.'"
        elif i == "." and dot == False and fraction == True:
            dot = True
        if i == "-" and neg == True and negative == True:
            return "Input contains more than one '-'"
        elif i == "-" and neg == False and negative == True:
            neg = True
    return True
def isd(dec, fraction=False, negative=True, large=True):
    """dba.isd(Decimal, [Fractions, Negatives, Long]) -> True/Error message"""
    if fraction == True and large == True:
        return "Input can not be long and fractional"
    if fraction == True:
        try:
            dec = float(dec)
        except:
            return "Input could not be converted into a float value"
    elif large == True:
        try:
            dec = long(dec)
        except:
            return "Input could not be converted into a long value"
    else:
        try:
            dec = int(dec)
        except:
            return "Input could not be converted into an integer value"
    if negative == False and dec < 0:
        return "Input is less than zero"
    return True
def ar():
    """dba.ar() -> Ascii Symbols"""
    return '\x00\x01\x02\x03\x04\x05\x06\x07\x08\t\n\x0b\x0c\r\x0e\x0f\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f !"#$%&\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\x7f\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8a\x8b\x8c\x8d\x8e\x8f\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9a\x9b\x9c\x9d\x9e\x9f\xa0\xa1\xa2\xa3\xa4\xa5\xa6\xa7\xa8\xa9\xaa\xab\xac\xad\xae\xaf\xb0\xb1\xb2\xb3\xb4\xb5\xb6\xb7\xb8\xb9\xba\xbb\xbc\xbd\xbe\xbf\xc0\xc1\xc2\xc3\xc4\xc5\xc6\xc7\xc8\xc9\xca\xcb\xcc\xcd\xce\xcf\xd0\xd1\xd2\xd3\xd4\xd5\xd6\xd7\xd8\xd9\xda\xdb\xdc\xdd\xde\xdf\xe0\xe1\xe2\xe3\xe4\xe5\xe6\xe7\xe8\xe9\xea\xeb\xec\xed\xee\xef\xf0\xf1\xf2\xf3\xf4\xf5\xf6\xf7\xf8\xf9\xfa\xfb\xfc\xfd\xfe\xff'
def isa(asc):
    """dba.isa(Ascii) -> True/Error message"""
    try:
        asc = str(asc)
    except:
        return "Input could not be converted into a string value"
    for i in asc:
        if i in ar() == False:
            return "Input contains a non-ASCII character"
    return True
def bd(bin):
    """dba.bd(Binary) -> Decimal Float/Long Integer"""
    if isb(bin) == True:
        bin = str(bin)
        neg = False
        if bin[0] == '-':
            bin = bin[1:]
            neg = True
        bin1 = ""
        bin2 = ""
        for i in xrange(len(bin)):
            if bin[i] == ".":
                bin1 = bin[0:i]
                bin2 = bin[i+1:len(bin)]
        if bin2 in ("", "0"):
            if bin2 == "":
                bin1 = bin
            binl = []
            for i in bin1:
                binl.append(int(i))
            dec = long(0)
            for i in xrange(len(binl)):
                dec += binl[-i-1]*pow(2,i)
            dec = long(dec)
            if neg:
                dec = - dec
            return dec
        else:
            if bin1 == "":
                bin1 = "0"
            if bin2 == "":
                bin2 = "0"
            bin1l = []
            bin2l = []
            for i in bin1:
                bin1l.append(int(i))
            for i in bin2:
                bin2l.append(int(i))
            dec = float(0)
            for i in xrange(len(bin1l)):
                dec += bin1l[-i-1]*pow(2,i)
            dec = float(dec)
            for i in xrange(len(bin2l)):
                dec += float(bin2l[i]*float(pow(2,-i-1)))
            if neg:
                dec = - dec
            return dec
    else:
        raise SyntaxError(isb(bin))
def db(dec, minlen=0):
    """dba.db(Decimal, [Minimum Length]) -> Binary String"""
    if isd(dec) == True:
        bin = ""
        if dec < 0:
            dec = - dec
            bin += "-"
        dec = float(dec)
        dec1 = str(dec)
        for i in xrange(len(dec1)):
            if dec1[i] == ".":
                dec1 = dec1[0:i]
                break
        two = (len(dec1))/4
        while pow(2,two) < dec:
            two = two + 1
        binl = []
        dot = False
        while dec <> 0:
            if dec < 1 and dot == False:
                dot = True
                binl.append(".")
            if pow(2, two) <= dec:
                dec = dec - pow(2, two)
                binl.append("1")
            else:
                binl.append("0")
            two = two - 1
        while two >= 0:
            binl.append("0")
            two = two - 1
        while binl[0] == "0" and (len(binl)>1 or dot==True):
            binl.remove("0")
        if "." in binl:
            binl.reverse()
            while binl[0] == "0":
                binl.remove("0")
            binl.reverse()
        if binl[0] == ".":
            bin += "0"
        for i in binl:
            bin = bin + i
        while len(bin) < minlen:
            bin = "0" + bin
        return bin
    else:
        raise SyntaxError(isd(dec))
def da(dec):
    """dba.da(Decimal) -> Ascii Symbol"""
    if isd(dec, False, False) == True:
        dec = int(dec)
        if dec > 255:
            raise SyntaxError("Input dec is larger than 255")
        return ar()[dec]
    else:
        raise SyntaxError(isd(dec, False, False))
def ad(asc):
    """dba.ad(Ascii Symbol) -> Decimal Integer"""
    if isa(asc) == True:
        asc = str(asc)
        if len(asc) <> 1:
            raise SyntaxError("Input asc contains more than one character")
        for i in xrange(len(ar())):
            if ar()[i] == asc:
                dec = i
        return dec
    else:
        raise SyntaxError(isa(asc))
def ba(bin):
    """dba.ba(Binary) -> Ascii String"""
    if isb(bin, False, False) == True:
        bin = str(bin)
        while float(len(bin))/8 <> int(len(bin)/8):
            bin = "0" + bin
        binl = []
        for i in xrange(len(bin)/8):
            binl.append(bin[i*8:(i*8)+8])
        asc = ""
        for i in binl:
            asc += da(bd(i))
        return asc
    else:
        raise SyntaxError(isb(bin, False, False))
def ab(asc):
    """dba.ab(Ascii String) -> Binary String"""
    if isa(asc) == True:
        asc = str(asc)
        bin = ""
        for i in xrange(len(asc)):
            bin += db(ad(asc[i]),8)
        return bin
    else:
        raise SyntaxError(isa(asc))
def dal(dec):
    """"dba.dal(Decimal -> Integer Length"""
    if isd(dec, False) == True:
        out = float(len(db(dec,8)))/8.0
        if int(out)>out:
            return int(out)
        else:
            return int(out)+1
    else:
        raise SyntaxError(isd(dec, False))
def daa(dec, maxval=0):
    """dba.daa(Decimal, [Maximum Value]) -> Ascii String"""
    if isd(dec, False) == True:
        out = ba(db(dec,8))
        while len(out)<dal(maxval):
            out = da(0)+out
        return out
    else:
        raise SyntaxError(isd(dec, False))
def aad(asc):
    """dba.aad(Ascii String) -> Decimal Long Integer"""
    if isa(asc) == True:
        return bd(ab(asc))  
    else:
        raise SyntaxError(isa(asc))
def mss(dat, max):
    """dba.mss(Decimal Data, Maximum Values) -> Ascii Data"""
    try:
        a = dat + [""]
    except:
        raise SyntaxError("Data is not list")
    try:
        a = max + [""]
    except:
        raise SyntaxError("Maximum Values are not a list")
    out = ""
    datplcs = len(dat)
    for i in xrange(datplcs):
        if isd(dat[i]):
            out += daa(dat[i],max[i])
        else:
            raise SyntaxError(isd(dat[i]))
    return out
def msl(dat, max):
    """dba.msl(Ascii Data, Maximum Values) -> Decimal Data"""
    if isa(dat):
        try:
            a = max + [""]
        except:
            raise SyntaxError("Maximum Values are not a list")
        datplcs = len(max)
        prvend = 0
        out = []
        for i in xrange(datplcs):
            curend = prvend + dal(max[i])
            cur = dat[prvend+1:curend]
            prvend = curend
            out.append(aad(cur))
        return out
    else:
        raise SyntaxError(isa(dat))
def enc(inp, keys):
    """dba.enc(Ascii String, Keys) -> Ascii String"""
    inp = str(inp)
    if isa(inp):
        try:
            keys.append("")
        except:
            keys = [keys]
        for i in xrange(len(keys)):
            keys[i] = str(keys[i])
        datal = []
        for i in xrange(len(inp)):
            datal.append(inp[i])
        for i in keys:
            if isa(i):
                for j in xrange(len(datal)):
                    cur = ad(datal[j]) + ad(i[j%len(i)])
                    if cur > 255:
                        cur -= 255
                    cur = da(cur)
                    datal[j] = cur
            else:
                raise SyntaxError(isa(i))
        out = ""
        for i in datal:
            out = out + i
        return out
    else:
        raise SyntaxError(isa(inp))
def dec(inp, keys):
    """dba.dec(Ascii String, Keys) -> Ascii String"""
    inp = str(inp)
    if isa(inp):
        try:
            keys.append("")
        except:
            keys = [keys]
        for i in xrange(len(keys)):
            keys[i] = str(keys[i])
        datal = []
        for i in xrange(len(inp)):
            datal.append(inp[i])
        for i in keys:
            if isa(i):
                for j in xrange(len(datal)):
                    cur = ad(datal[j]) - ad(i[j%len(i)])
                    if cur < 0:
                        cur += 255
                    cur = da(cur)
                    datal[j] = cur
            else:
                raise SyntaxError(isa(i))
        out = ""
        for i in datal:
            out = out + i
        return out 
    else:
        raise SyntaxError(isa(inp))
